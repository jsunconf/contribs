{
  "name": "tlsopts",
  "version": "0.0.1",
  "author": {
    "name": "Larz Conwell"
  },
  "license": "mit",
  "description": "Make TLS configuration simple",
  "scripts": {
    "test": "node ./test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/larzconwell/tlsopts.git"
  },
  "keywords": [
    "tls",
    "configuration",
    "options"
  ],
  "dependencies": {
    "async": "~0.2.9"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "readme": "## tlsopts\n`npm install tlsopts`\n\nMake TLS configuration cleaner.\n\n### API\ntlsopts exports a single function with a `sync` method on it.\n\n#### tlsopts\n`tlsopts(opts, function (err) {});`\nParses the given `opts` object into the format accepted by the `tls` module.\n\n`Buffer` values and keys not mentioned below are ignored.\n\nThe keys `pfx`, `key`, and `cert` can be given a path to get the contents from.\n\nThe key `ca` can be either a single path pointing to a bundle, or an array\nof paths(or `Buffer`s) to get the contents from.\n\n#### tlsopts.sync\n`tlsopts.sync(opts)`\nSynchronous alternative to `tlsopts`, it returns the options object.\n\n### Example\n```\nvar https = require('https'),\n    tlsopts = require('tlsopts'),\n    fs = require('fs'),\n    opts;\n\nopts = {\n  key: fs.readFileSync('server.key'),\n  cert: 'server.crt',\n  ca: 'server_bundle.crt'\n};\n\ntlsopts(opts, function (err) {\n  if (err) {\n    throw err;\n  }\n\n  var server = https.createServer(opts, function (req, res) {\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end('Hello World\\n');\n  });\n\n  server.listen(4000, '127.0.0.1');\n});\n```\n\n### License\nMIT licensed, see [here](https://raw.github.com/larzconwell/tlsopts/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/larzconwell/tlsopts/issues"
  },
  "_id": "tlsopts@0.0.1",
  "_from": "tlsopts@0.0.1"
}
